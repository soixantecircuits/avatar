(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9892],{69449:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/plugins",function(){return a(16825)}])},16825:function(n,s,a){"use strict";a.r(s);var t=a(85893),p=a(11151),e=a(72788),o=a(36336),c=a(50224);a(30196);let l=e.L,i=o.X_;function r(n){let s=Object.assign({p:"p",code:"code",a:"a",ul:"ul",li:"li",hr:"hr",pre:"pre",em:"em"},(0,p.ah)(),n.components),{Editor:a}=s;return a||function(n,s){throw Error("Expected "+(s?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Editor",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(c.X,{hidden:!0,level:2,id:"overview",children:"Overview"}),"\n",(0,t.jsx)(s.p,{children:"Plugins let you register new styles for Tailwind to inject into the user’s stylesheet using JavaScript instead of CSS."}),"\n",(0,t.jsxs)(s.p,{children:["To get started with your first plugin, import Tailwind’s ",(0,t.jsx)(s.code,{children:"plugin"})," function from ",(0,t.jsx)(s.code,{children:"tailwindcss/plugin"}),". Then inside your ",(0,t.jsx)(s.code,{children:"plugins"})," array, call the imported ",(0,t.jsx)(s.code,{children:"plugin"})," function with an anonymous function as the first argument."]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> addUtilities<span class="token punctuation">,</span> addComponents<span class="token punctuation">,</span> e<span class="token punctuation">,</span> config <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Add your custom styles here</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Plugin functions receive a single object argument that can be ",(0,t.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",children:"destructured"})," into several helper functions:"]}),"\n",(0,t.jsxs)(s.ul,{role:"list",children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"addUtilities()"}),", for registering new static utility styles"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"matchUtilities()"}),", for registering new dynamic utility styles"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"addComponents()"}),", for registering new static component styles"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"matchComponents()"}),", for registering new dynamic component styles"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"addBase()"}),", for registering new base styles"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"addVariant()"}),", for registering custom static variants"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"matchVariant()"}),", for registering custom dynamic variants"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"theme()"}),", for looking up values in the user’s theme configuration"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"config()"}),", for looking up values in the user’s Tailwind configuration"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"corePlugins()"}),", for checking if a core plugin is enabled"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"e()"}),", for manually escaping strings meant to be used in class names"]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(c.X,{level:2,id:"official-plugins",children:"Official plugins"}),"\n",(0,t.jsx)(s.p,{children:"We’ve developed a handful of official plugins for popular features that for one reason or another don’t belong in core yet."}),"\n",(0,t.jsxs)(s.p,{children:["Plugins can be added to your project by installing them via npm, then adding them to your ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," file:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@tailwindcss/typography\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@tailwindcss/forms\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@tailwindcss/aspect-ratio\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@tailwindcss/container-queries\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(c.X,{level:3,id:"typography",children:"Typography"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"@tailwindcss/typography"})," plugin adds a set of ",(0,t.jsx)(s.code,{children:"prose"})," classes that can be used to quickly add sensible typographic styles to content blocks that come from sources like markdown or a CMS database."]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prose lg:prose-xl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Garlic bread with cheese: What the science tells us<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>\n    For years parents have espoused the health benefits of eating garlic bread with cheese to their\n    children, with the food earning such an iconic status in our culture that kids will often dress\n    up as warm, cheesy loaf for Halloween.\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>\n    But a recent study shows that the celebrated appetizer may be linked to a series of rabies cases\n    springing up around the country.\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"/docs/typography-plugin",children:"Learn more about the typography plugin →"})}),"\n",(0,t.jsx)(c.X,{level:3,id:"forms",children:"Forms"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"@tailwindcss/forms"})," plugin adds an opinionated form reset layer that makes it easier to style form elements with utility classes."]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token comment">&lt;!-- You can actually customize padding on a select element: --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>px-4 py-3 rounded-full<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- Or change a checkbox color using text color utilities: --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rounded text-pink-500<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code>'}}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://github.com/tailwindlabs/tailwindcss-forms",children:"Learn more about the forms plugin →"})}),"\n",(0,t.jsx)(c.X,{level:3,id:"aspect-ratio",children:"Aspect ratio"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"@tailwindcss/aspect-ratio"})," plugin is an alternative to native ",(0,t.jsx)(s.code,{children:"aspect-ratio"})," support that works in older browsers, and adds ",(0,t.jsx)(s.code,{children:"aspect-w-{n}"})," and ",(0,t.jsx)(s.code,{children:"aspect-h-{n}"})," classes that can be combined to give an element a fixed aspect ratio."]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aspect-w-16 aspect-h-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.youtube.com/embed/dQw4w9WgXcQ<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">allow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture<span class="token punctuation">"</span></span> <span class="token attr-name">allowfullscreen</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://github.com/tailwindlabs/tailwindcss-aspect-ratio",children:"Learn more about the aspect ratio plugin →"})}),"\n",(0,t.jsx)(c.X,{level:3,id:"container-queries",children:"Container queries"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"@tailwindcss/container-queries"})," plugin adds new ",(0,t.jsx)(s.code,{children:"@{size}"})," variants like ",(0,t.jsx)(s.code,{children:"@sm"})," and ",(0,t.jsx)(s.code,{children:"@md"})," that let you style an element based on the dimensions of a parent marked with ",(0,t.jsx)(s.code,{children:"@container"})," instead of the viewport."]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@lg:text-sky-400<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- ... --></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://github.com/tailwindlabs/tailwindcss-container-queries",children:"Learn more about the container queries plugin →"})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(c.X,{level:2,id:"adding-utilities",children:"Adding utilities"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"addUtilities"})," and ",(0,t.jsx)(s.code,{children:"matchUtilities"})," functions allow you to register new styles in Tailwind’s ",(0,t.jsx)(s.code,{children:"utilities"})," layer."]}),"\n",(0,t.jsx)(s.p,{children:"Like with the utilities Tailwind includes by default, utilities added by a plugin will only be included in the generated CSS if they are actually being used in the project."}),"\n",(0,t.jsx)(c.X,{level:3,id:"static-utilities",children:"Static utilities"}),"\n",(0,t.jsxs)(s.p,{children:["Use the ",(0,t.jsx)(s.code,{children:"addUtilities"})," function to register simple static utilities that don’t support user-provided values:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> addUtilities <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">addUtilities</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token string-property property">\'.content-auto\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token string-property property">\'content-visibility\'</span><span class="token operator">:</span> <span class="token string">\'auto\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string-property property">\'.content-hidden\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token string-property property">\'content-visibility\'</span><span class="token operator">:</span> <span class="token string">\'hidden\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string-property property">\'.content-visible\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token string-property property">\'content-visibility\'</span><span class="token operator">:</span> <span class="token string">\'visible\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Learn more about how to represent your styles in JavaScript in the ",(0,t.jsx)(s.a,{href:"#css-in-js-syntax",children:"CSS-in-JS syntax"})," reference."]}),"\n",(0,t.jsx)(c.X,{level:3,id:"dynamic-utilities",children:"Dynamic utilities"}),"\n",(0,t.jsxs)(s.p,{children:["Use the ",(0,t.jsx)(s.code,{children:"matchUtilities"})," function to register utilities that map to values defined in the user’s ",(0,t.jsx)(s.code,{children:"theme"})," configuration:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">tabSize</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token number">1</span><span class="token operator">:</span> <span class="token string">\'1\'</span><span class="token punctuation">,</span>\n      <span class="token number">2</span><span class="token operator">:</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span>\n      <span class="token number">4</span><span class="token operator">:</span> <span class="token string">\'4\'</span><span class="token punctuation">,</span>\n      <span class="token number">8</span><span class="token operator">:</span> <span class="token string">\'8\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> matchUtilities<span class="token punctuation">,</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">matchUtilities</span><span class="token punctuation">(</span>\n        <span class="token punctuation">{</span>\n          <span class="token function-variable function">tab</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">tabSize</span><span class="token operator">:</span> value\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token literal-property property">values</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'tabSize\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Utilities defined this way also support ",(0,t.jsx)(s.a,{href:"/docs/adding-custom-styles#using-arbitrary-values",children:"arbitrary values"}),", which means you can use values not present in the theme using square bracket notation:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">tab-[13]</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(c.X,{level:3,id:"prefix-and-important",children:"Prefix and important"}),"\n",(0,t.jsxs)(s.p,{children:["By default, plugin utilities automatically respect the user’s ",(0,t.jsx)(s.a,{href:"/docs/configuration/#prefix",children:(0,t.jsx)(s.code,{children:"prefix"})})," and ",(0,t.jsx)(s.a,{href:"/docs/configuration/#important",children:(0,t.jsx)(s.code,{children:"important"})})," preferences."]}),"\n",(0,t.jsx)(s.p,{children:"That means that given this Tailwind configuration:"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">\'tw-\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">important</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"…the example plugin above would generate the following CSS:"}),"\n",(0,t.jsx)(s.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.tw-content-auto</span></span> <span class="token punctuation">{</span>\n  <span class="token property">content-visibility</span><span class="token punctuation">:</span> auto <span class="token important">!important</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">.tw-content-hidden</span></span> <span class="token punctuation">{</span>\n  <span class="token property">content-visibility</span><span class="token punctuation">:</span> hidden <span class="token important">!important</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">.tw-content-visible</span></span> <span class="token punctuation">{</span>\n  <span class="token property">content-visibility</span><span class="token punctuation">:</span> visible <span class="token important">!important</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,t.jsx)(c.X,{level:3,id:"using-with-modifiers",children:"Using with modifiers"}),"\n",(0,t.jsxs)(s.p,{children:["Any custom utilities added using ",(0,t.jsx)(s.code,{children:"addUtilities"})," can automatically be used with modifiers:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content-auto lg:content-visible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["Learn more in the ",(0,t.jsx)(s.a,{href:"/docs/hover-focus-and-other-states",children:"Hover, Focus, and Other States"})," documentation."]}),"\n",(0,t.jsx)(c.X,{level:3,id:"providing-default-values",children:"Providing default values"}),"\n",(0,t.jsxs)(s.p,{children:["Utility plugins can provide default values by including a configuration object as the second argument to the ",(0,t.jsx)(s.code,{children:"plugin"})," function:"]}),"\n",(0,t.jsx)(a,{filename:"./plugins/tab-size.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> matchUtilities<span class="token punctuation">,</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">matchUtilities</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span>\n      <span class="token function-variable function">tab</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">tabSize</span><span class="token operator">:</span> value\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">values</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'tabSize\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">tabSize</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token number">1</span><span class="token operator">:</span> <span class="token string">\'1\'</span><span class="token punctuation">,</span>\n      <span class="token number">2</span><span class="token operator">:</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span>\n      <span class="token number">4</span><span class="token operator">:</span> <span class="token string">\'4\'</span><span class="token punctuation">,</span>\n      <span class="token number">8</span><span class="token operator">:</span> <span class="token string">\'8\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"These values behave just like the values in the default configuration, and can be overridden or extended by the end user."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(c.X,{level:2,id:"adding-components",children:"Adding components"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"addComponents"})," function allows you to register new styles in Tailwind’s ",(0,t.jsx)(s.code,{children:"components"})," layer."]}),"\n",(0,t.jsx)(s.p,{children:"Use it to add more opinionated, complex classes like buttons, form controls, alerts, etc; the sort of pre-built components you often see in other frameworks that you might need to override with utility classes."}),"\n",(0,t.jsxs)(s.p,{children:["To add new component styles from a plugin, call ",(0,t.jsx)(s.code,{children:"addComponents"}),", passing in your styles using ",(0,t.jsx)(s.a,{href:"#css-in-js-syntax",children:"CSS-in-JS syntax"}),":"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> addComponents <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">addComponents</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token string-property property">\'.btn\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">\'.5rem 1rem\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token string">\'.25rem\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">\'600\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string-property property">\'.btn-blue\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'#3490dc\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">\'#fff\'</span><span class="token punctuation">,</span>\n          <span class="token string-property property">\'&amp;:hover\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'#2779bd\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string-property property">\'.btn-red\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'#e3342f\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">\'#fff\'</span><span class="token punctuation">,</span>\n          <span class="token string-property property">\'&amp;:hover\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'#cc1f1a\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"Like with other component classes in Tailwind, component classes added by a plugin will only be included in the generated CSS if they are actually being used in the project."}),"\n",(0,t.jsx)(c.X,{level:3,id:"prefix-and-important-1",children:"Prefix and important"}),"\n",(0,t.jsxs)(s.p,{children:["By default, component classes automatically respect the user’s ",(0,t.jsx)(s.code,{children:"prefix"})," preference, but ",(0,t.jsx)(s.em,{children:"they are not affected"})," by the user’s ",(0,t.jsx)(s.code,{children:"important"})," preference."]}),"\n",(0,t.jsx)(s.p,{children:"That means that given this Tailwind configuration:"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">\'tw-\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">important</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"…the example plugin above would generate the following CSS:"}),"\n",(0,t.jsx)(s.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.tw-btn</span></span> <span class="token punctuation">{</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">.5</span><span class="token unit">rem</span> <span class="token number">1</span><span class="token unit">rem</span><span class="token punctuation">;</span>\n  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">.25</span><span class="token unit">rem</span><span class="token punctuation">;</span>\n  <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">.tw-btn-blue</span></span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode color">#3490dc</span><span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode color">#fff</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">.tw-btn-blue</span><span class="token pseudo-class">:hover</span></span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode color">#2779bd</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">.tw-btn-red</span></span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode color">#e3342f</span><span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode color">#fff</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">.tw-btn-red</span><span class="token pseudo-class">:hover</span></span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode color">#cc1f1a</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["Although there’s rarely a good reason to make component declarations important, if you really need to do it you can always add ",(0,t.jsx)(s.code,{children:"!important"})," manually:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> addComponents <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">addComponents</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token string-property property">\'.btn\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">\'.5rem 1rem !important\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token string">\'.25rem !important\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">\'600 !important\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">// ...</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"All classes in a selector will be prefixed by default, so if you add a more complex style like:"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">\'tw-\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> addComponents <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> components <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n        <span class="token string-property property">\'.navbar-inverse a.nav-link\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">\'#fff\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token function">addComponents</span><span class="token punctuation">(</span>components<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"…the following CSS would be generated:"}),"\n",(0,t.jsx)(s.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.tw-navbar-inverse</span> a<span class="token class">.tw-nav-link</span></span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode color">#fff</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,t.jsx)(c.X,{level:3,id:"using-with-modifiers-1",children:"Using with modifiers"}),"\n",(0,t.jsxs)(s.p,{children:["Any component classes added using ",(0,t.jsx)(s.code,{children:"addComponents"})," can automatically be used with modifiers:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn md:btn-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["Learn more in the ",(0,t.jsx)(s.a,{href:"/docs/hover-focus-and-other-states",children:"Hover, Focus, and Other States"})," documentation."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(c.X,{level:2,id:"adding-base-styles",children:"Adding base styles"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"addBase"})," function allows you to register new styles in Tailwind’s ",(0,t.jsx)(s.code,{children:"base"})," layer. Use it to add things like base typography styles, opinionated global resets, or ",(0,t.jsx)(s.code,{children:"@font-face"})," rules."]}),"\n",(0,t.jsxs)(s.p,{children:["To add new base styles from a plugin, call ",(0,t.jsx)(s.code,{children:"addBase"}),", passing in your styles using ",(0,t.jsx)(s.a,{href:"#css-in-js-syntax",children:"CSS-in-JS syntax"}),":"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> addBase<span class="token punctuation">,</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">addBase</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token string-property property">\'h1\'</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'fontSize.2xl\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string-property property">\'h2\'</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'fontSize.xl\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string-property property">\'h3\'</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'fontSize.lg\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Since base styles are meant to target bare selectors like ",(0,t.jsx)(s.code,{children:"div"})," or ",(0,t.jsx)(s.code,{children:"h1"}),", they do not respect the user’s ",(0,t.jsx)(s.code,{children:"prefix"})," or ",(0,t.jsx)(s.code,{children:"important"})," configuration."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(c.X,{level:2,id:"adding-variants",children:"Adding variants"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"addVariant"})," and ",(0,t.jsx)(s.code,{children:"matchVariant"})," functions allow you to register your own custom ",(0,t.jsx)(s.a,{href:"/docs/hover-focus-and-other-states",children:"modifiers"})," that can be used just like built-in variants like ",(0,t.jsx)(s.code,{children:"hover"}),", ",(0,t.jsx)(s.code,{children:"focus"}),", or ",(0,t.jsx)(s.code,{children:"supports"}),"."]}),"\n",(0,t.jsx)(c.X,{level:3,id:"static-variants",children:"Static variants"}),"\n",(0,t.jsxs)(s.p,{children:["Use the ",(0,t.jsx)(s.code,{children:"addVariant"})," function for simple custom variants, passing in the name of your custom variant, and a format string that represents how the selector should be modified."]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> addVariant <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">addVariant</span><span class="token punctuation">(</span><span class="token string">\'optional\'</span><span class="token punctuation">,</span> <span class="token string">\'&amp;:optional\'</span><span class="token punctuation">)</span>\n      <span class="token function">addVariant</span><span class="token punctuation">(</span><span class="token string">\'hocus\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'&amp;:hover\'</span><span class="token punctuation">,</span> <span class="token string">\'&amp;:focus\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token function">addVariant</span><span class="token punctuation">(</span><span class="token string">\'inverted-colors\'</span><span class="token punctuation">,</span> <span class="token string">\'@media (inverted-colors: inverted)\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"The first argument is the modifier name that users will use in their HTML, so the above example would make it possible to write classes like these:"}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex <span class="code-highlight bg-code-highlight">inverted-colors:outline</span> ...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">optional:border-gray-300</span> ...<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-blue-500 <span class="code-highlight bg-code-highlight">hocus:bg-blue-600</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(c.X,{level:3,id:"dynamic-variants",children:"Dynamic variants"}),"\n",(0,t.jsxs)(s.p,{children:["Use the ",(0,t.jsx)(s.code,{children:"matchVariant"})," function to register new parameterized variants like the built-in ",(0,t.jsx)(s.code,{children:"supports-*"}),", ",(0,t.jsx)(s.code,{children:"data-*"}),", and ",(0,t.jsx)(s.code,{children:"aria-*"})," variants:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> matchVariant <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">matchVariant</span><span class="token punctuation">(</span>\n        <span class="token string">\'nth\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword control-flow">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&amp;:nth-child(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">values</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token number">1</span><span class="token operator">:</span> <span class="token string">\'1\'</span><span class="token punctuation">,</span>\n            <span class="token number">2</span><span class="token operator">:</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span>\n            <span class="token number">3</span><span class="token operator">:</span> <span class="token string">\'3\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Variants defined with ",(0,t.jsx)(s.code,{children:"matchVariant"})," also support arbitrary values using square bracket notation:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">nth-[3n+1]:bg-blue-500</span> ...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["Use the ",(0,t.jsx)(s.code,{children:"sort"})," option to control the source order of the generated CSS if needed to avoid precedence issues with other values that come from the same variant:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-js",dangerouslySetInnerHTML:{__html:'<code class="language-js"><span class="token function">matchVariant</span><span class="token punctuation">(</span><span class="token string">"min"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@media (min-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>'}}),"\n",(0,t.jsx)(c.X,{level:3,id:"parent-and-sibling-states",children:"Parent and sibling states"}),"\n",(0,t.jsxs)(s.p,{children:["Your custom modifiers won’t automatically work with Tailwind’s ",(0,t.jsx)(s.a,{href:"/docs/hover-focus-and-other-states#styling-based-on-parent-state",children:"parent"})," and ",(0,t.jsx)(s.a,{href:"/docs/hover-focus-and-other-states#styling-based-on-sibling-state",children:"sibling"})," state modifiers."]}),"\n",(0,t.jsxs)(s.p,{children:["To support the ",(0,t.jsx)(s.code,{children:"group-*"})," and ",(0,t.jsx)(s.code,{children:"peer-*"})," versions of your own custom modifiers, register them as separate variants using the special ",(0,t.jsx)(s.code,{children:":merge"})," directive to ensure the ",(0,t.jsx)(s.code,{children:".group"})," and ",(0,t.jsx)(s.code,{children:".peer"})," classes only appear once in the final selector."]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token block"><span class="token keyword">const</span><span class="token plain"> plugin </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span><span class="token plain"></span>\n</span><span class="token plain block">\n</span><span class="token block"><span class="token plain">module</span><span class="token punctuation">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">  </span><span class="token comment">// ...</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">  </span><span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">[</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">    </span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter punctuation">{</span><span class="token parameter"> addVariant </span><span class="token parameter punctuation">}</span><span class="token punctuation">)</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">      </span><span class="token function">addVariant</span><span class="token punctuation">(</span><span class="token string">\'optional\'</span><span class="token punctuation">,</span><span class="token plain"> </span><span class="token string">\'&amp;:optional\'</span><span class="token punctuation">)</span><span class="token plain"></span>\n</span><span class="token block -mx-5 pl-4 pr-5 border-l-4 border-sky-400 bg-sky-300/[0.15]"><span class="token plain">      </span><span class="token function">addVariant</span><span class="token punctuation">(</span><span class="token string">\'group-optional\'</span><span class="token punctuation">,</span><span class="token plain"> </span><span class="token string">\':merge(.group):optional &amp;\'</span><span class="token punctuation">)</span><span class="token plain"></span>\n</span><span class="token block -mx-5 pl-4 pr-5 border-l-4 border-sky-400 bg-sky-300/[0.15]"><span class="token plain">      </span><span class="token function">addVariant</span><span class="token punctuation">(</span><span class="token string">\'peer-optional\'</span><span class="token punctuation">,</span><span class="token plain"> </span><span class="token string">\':merge(.peer):optional ~ &amp;\'</span><span class="token punctuation">)</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">    </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">  </span><span class="token punctuation">]</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain"></span><span class="token punctuation">}</span>\n</span></code></pre>'}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(c.X,{level:2,id:"extending-the-configuration",children:"Extending the configuration"}),"\n",(0,t.jsxs)(s.p,{children:["Plugins can merge their own set of configuration values into the user’s ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," configuration by providing an object as the second argument to the ",(0,t.jsx)(s.code,{children:"plugin"})," function:"]}),"\n",(0,t.jsx)(a,{filename:"./plugins/tab-size.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> matchUtilities<span class="token punctuation">,</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">matchUtilities</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span>\n      <span class="token function-variable function">tab</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">tabSize</span><span class="token operator">:</span> value\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">values</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'tabSize\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">tabSize</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token number">1</span><span class="token operator">:</span> <span class="token string">\'1\'</span><span class="token punctuation">,</span>\n      <span class="token number">2</span><span class="token operator">:</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span>\n      <span class="token number">4</span><span class="token operator">:</span> <span class="token string">\'4\'</span><span class="token punctuation">,</span>\n      <span class="token number">8</span><span class="token operator">:</span> <span class="token string">\'8\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["This can be useful for things like providing default ",(0,t.jsx)(s.code,{children:"theme"})," values for the classes your plugin generates."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(c.X,{level:2,id:"exposing-options",children:"Exposing options"}),"\n",(0,t.jsxs)(s.p,{children:["Sometimes it makes sense for a plugin to be configurable in a way that doesn’t really belong under ",(0,t.jsx)(s.code,{children:"theme"}),", like perhaps you want users to be able to customize the class name your plugin uses."]}),"\n",(0,t.jsxs)(s.p,{children:["For cases like this, you can use ",(0,t.jsx)(s.code,{children:"plugin.withOptions"})," to define a plugin that can be invoked with a configuration object. This API is similar to the regular ",(0,t.jsx)(s.code,{children:"plugin"})," API, except each argument should be a function that receives the user’s ",(0,t.jsx)(s.code,{children:"options"})," and returns the value that you would have normally passed in using the regular API:"]}),"\n",(0,t.jsx)(a,{filename:"./plugins/markdown.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> plugin<span class="token punctuation">.</span><span class="token method function property-access">withOptions</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> addComponents <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> className <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token property-access">className</span> <span class="token operator">??</span> <span class="token string">\'markdown\'</span>\n\n    <span class="token function">addComponents</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>className<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">markdown</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["The user would invoke your plugin passing along their options when registering it in their ",(0,t.jsx)(s.code,{children:"plugins"})," configuration:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./plugins/markdown.js\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">\'wysiwyg\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"The user can also register plugins created this way normally without invoking them if they don’t need to pass in any custom options:"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./plugins/markdown.js\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(c.X,{level:2,id:"css-in-js-syntax",children:"CSS-in-JS syntax"}),"\n",(0,t.jsxs)(s.p,{children:["Tailwind’s plugin system expects CSS rules written as JavaScript objects, using the same sort of syntax you might recognize from CSS-in-JS libraries like ",(0,t.jsx)(s.a,{href:"https://emotion.sh/docs/object-styles",children:"Emotion"}),", powered by ",(0,t.jsx)(s.a,{href:"https://github.com/postcss/postcss-js",children:"postcss-js"})," under-the-hood."]}),"\n",(0,t.jsx)(s.p,{children:"Consider this simple CSS rule:"}),"\n",(0,t.jsx)(s.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.card</span></span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode color">#fff</span><span class="token punctuation">;</span>\n  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">.25</span><span class="token unit">rem</span><span class="token punctuation">;</span>\n  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">2</span><span class="token unit">px</span> <span class="token number">4</span><span class="token unit">px</span> <span class="token color"><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"Translating this to a CSS-in-JS object would look like this:"}),"\n",(0,t.jsx)(s.pre,{className:"language-js",dangerouslySetInnerHTML:{__html:'<code class="language-js"><span class="token function">addComponents</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string-property property">\'.card\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">\'background-color\'</span><span class="token operator">:</span> <span class="token string">\'#fff\'</span><span class="token punctuation">,</span>\n    <span class="token string-property property">\'border-radius\'</span><span class="token operator">:</span> <span class="token string">\'.25rem\'</span><span class="token punctuation">,</span>\n    <span class="token string-property property">\'box-shadow\'</span><span class="token operator">:</span> <span class="token string">\'0 2px 4px rgba(0,0,0,0.2)\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"For convenience, property names can also be written in camelCase and will be automatically translated to dash-case:"}),"\n",(0,t.jsx)(s.pre,{className:"language-js",dangerouslySetInnerHTML:{__html:'<code class="language-js"><span class="token function">addComponents</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string-property property">\'.card\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'#fff\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token string">\'.25rem\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">boxShadow</span><span class="token operator">:</span> <span class="token string">\'0 2px 4px rgba(0,0,0,0.2)\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["Nesting is also supported (powered by ",(0,t.jsx)(s.a,{href:"https://github.com/postcss/postcss-nested",children:"postcss-nested"}),"), using the same syntax you might be familiar with from Sass or Less:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-js",dangerouslySetInnerHTML:{__html:'<code class="language-js"><span class="token function">addComponents</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string-property property">\'.card\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'#fff\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token string">\'.25rem\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">boxShadow</span><span class="token operator">:</span> <span class="token string">\'0 2px 4px rgba(0,0,0,0.2)\'</span><span class="token punctuation">,</span>\n    <span class="token string-property property">\'&amp;:hover\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">boxShadow</span><span class="token operator">:</span> <span class="token string">\'0 10px 15px rgba(0,0,0,0.2)\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string-property property">\'@media (min-width: 500px)\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token string">\'.5rem\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"Multiple rules can be defined in the same object:"}),"\n",(0,t.jsx)(s.pre,{className:"language-js",dangerouslySetInnerHTML:{__html:'<code class="language-js"><span class="token function">addComponents</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string-property property">\'.btn\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">\'.5rem 1rem\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token string">\'.25rem\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">\'600\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string-property property">\'.btn-blue\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'#3490dc\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">\'#fff\'</span><span class="token punctuation">,</span>\n    <span class="token string-property property">\'&amp;:hover\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'#2779bd\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string-property property">\'.btn-red\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'#e3342f\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">\'#fff\'</span><span class="token punctuation">,</span>\n    <span class="token string-property property">\'&amp;:hover\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">\'#cc1f1a\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"…or as an array of objects in case you need to repeat the same key:"}),"\n",(0,t.jsx)(s.pre,{className:"language-js",dangerouslySetInnerHTML:{__html:'<code class="language-js"><span class="token function">addComponents</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token string-property property">\'@media (min-width: 500px)\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token string-property property">\'@media (min-width: 500px)\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token string-property property">\'@media (min-width: 500px)\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span></code>'}})]})}function u(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,t.jsx)(i,Object.assign({},n,{children:(0,t.jsx)(r,n)}))}s.default=u,u.layoutProps={Layout:l,meta:{title:"Plugins",description:"Extending Tailwind with reusable third-party plugins."},slug:"plugins",tableOfContents:[{title:"Overview",slug:"overview",children:[]},{title:"Official plugins",slug:"official-plugins",children:[{title:"Typography",slug:"typography",children:[]},{title:"Forms",slug:"forms",children:[]},{title:"Aspect ratio",slug:"aspect-ratio",children:[]},{title:"Container queries",slug:"container-queries",children:[]}]},{title:"Adding utilities",slug:"adding-utilities",children:[{title:"Static utilities",slug:"static-utilities",children:[]},{title:"Dynamic utilities",slug:"dynamic-utilities",children:[]},{title:"Prefix and important",slug:"prefix-and-important",children:[]},{title:"Using with modifiers",slug:"using-with-modifiers",children:[]},{title:"Providing default values",slug:"providing-default-values",children:[]}]},{title:"Adding components",slug:"adding-components",children:[{title:"Prefix and important",slug:"prefix-and-important-1",children:[]},{title:"Using with modifiers",slug:"using-with-modifiers-1",children:[]}]},{title:"Adding base styles",slug:"adding-base-styles",children:[]},{title:"Adding variants",slug:"adding-variants",children:[{title:"Static variants",slug:"static-variants",children:[]},{title:"Dynamic variants",slug:"dynamic-variants",children:[]},{title:"Parent and sibling states",slug:"parent-and-sibling-states",children:[]}]},{title:"Extending the configuration",slug:"extending-the-configuration",children:[]},{title:"Exposing options",slug:"exposing-options",children:[]},{title:"CSS-in-JS syntax",slug:"css-in-js-syntax",children:[]}]}},30196:function(n,s,a){"use strict";a.d(s,{$o:function(){return o},Vw:function(){return p},qm:function(){return e}});var t=a(85893);function p(n){let{children:s}=n;return(0,t.jsxs)("div",{className:"flex items-start my-6 space-x-4",children:[(0,t.jsxs)("div",{className:"relative mt-1 w-4 h-4 rounded-full bg-cyan-500 text-white flex items-center justify-center ring-2 ring-cyan-500 dark:bg-sky-500 dark:ring-sky-500",children:[(0,t.jsx)("svg",{width:"6",height:"4.5",className:"overflow-visible","aria-hidden":"true",children:(0,t.jsx)("path",{d:"M6 0L2 4.5L0 2.5",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})}),(0,t.jsx)("div",{className:"absolute top-full mt-1 left-[0.46875rem] w-px h-[1.375rem] bg-cyan-500/30 rounded-full dark:bg-sky-400/30"})]}),(0,t.jsx)("p",{className:"m-0 flex-1 text-base font-semibold text-slate-900 dark:text-slate-200",children:s})]})}function e(n){let{children:s}=n;return(0,t.jsxs)("div",{className:"flex items-start my-6 space-x-4",children:[(0,t.jsxs)("div",{className:"relative mt-1 w-4 h-4 rounded-full bg-rose-400 text-white flex items-center justify-center ring-2 ring-rose-400 dark:bg-red-400 dark:ring-red-400",children:[(0,t.jsx)("svg",{width:"6",height:"6",className:"overflow-visible","aria-hidden":"true",children:(0,t.jsx)("path",{d:"M0 0L6 6M6 0L0 6",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})}),(0,t.jsx)("div",{className:"absolute top-full mt-1 left-[0.46875rem] w-px h-[1.375rem] bg-rose-200 rounded-full dark:bg-red-200/25"})]}),(0,t.jsx)("p",{className:"m-0 flex-1 text-base font-semibold text-slate-900 dark:text-slate-200",children:s})]})}function o(n){let{children:s}=n;return(0,t.jsxs)("div",{className:"mt-6 -mb-1 flex space-x-2",children:[(0,t.jsx)("svg",{className:"flex-none w-5 h-5 text-slate-400 dark:text-slate-600",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",children:(0,t.jsx)("path",{fillRule:"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z",clipRule:"evenodd"})}),(0,t.jsx)("p",{className:"m-0 text-slate-700 text-sm font-medium dark:text-slate-200",children:s})]})}},72788:function(n,s,a){"use strict";a.d(s,{L:function(){return c}});var t=a(85893),p=a(97903),e=a(77929),o=a(87308);function c(n){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.Dx,{children:n.layoutProps.meta.metaTitle||n.layoutProps.meta.title}),(0,t.jsx)(p.C,{nav:o.u,...n})]})}c.nav=o.u},11151:function(n,s,a){"use strict";a.d(s,{Zo:function(){return c},ah:function(){return e}});var t=a(67294);let p=t.createContext({});function e(n){let s=t.useContext(p);return t.useMemo(()=>"function"==typeof n?n(s):{...s,...n},[s,n])}let o={};function c({components:n,children:s,disableParentContext:a}){let c;return c=a?"function"==typeof n?n({}):n||o:e(n),t.createElement(p.Provider,{value:c},s)}}},function(n){n.O(0,[3430,2152,9495,224,7308,9774,2888,179],function(){return n(n.s=69449)}),_N_E=n.O()}]);